webpackHotUpdate("static/development/pages/index.js",{

/***/ "./src/lib/chart.js":
/*!**************************!*\
  !*** ./src/lib/chart.js ***!
  \**************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classCallCheck */ \"./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/createClass */ \"./node_modules/@babel/runtime/helpers/esm/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ \"./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inherits */ \"./node_modules/@babel/runtime/helpers/esm/inherits.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/esm/possibleConstructorReturn */ \"./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/esm/getPrototypeOf */ \"./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/utils */ \"./src/lib/utils/utils.js\");\n/* harmony import */ var _base_ChartComponent__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./base/ChartComponent */ \"./src/lib/base/ChartComponent.js\");\n/* harmony import */ var _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @reuters-graphics/d3-locale */ \"./node_modules/@reuters-graphics/d3-locale/dist/index.js\");\n/* harmony import */ var _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var mustache__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! mustache */ \"./node_modules/mustache/mustache.js\");\n/* harmony import */ var mustache__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(mustache__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _utils_d3__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/d3 */ \"./src/lib/utils/d3.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash */ \"./node_modules/lodash/lodash.js\");\n/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_12__);\n\n\n\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = Object(_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return Object(_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\n\n // import {round} from 'lodash'\n// import defaultData from './defaultData.json';\n\nvar WeeklyAverage = /*#__PURE__*/function (_ChartComponent) {\n  Object(_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(WeeklyAverage, _ChartComponent);\n\n  var _super = _createSuper(WeeklyAverage);\n\n  function WeeklyAverage() {\n    var _this;\n\n    Object(_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this, WeeklyAverage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this), \"defaultProps\", {\n      stroke: '#eec331',\n      strokeWidth: 2.5,\n      fill: 'rgba(255, 255, 255, 0.3)',\n      height: 200,\n      avg_days: 7,\n      annotations: [],\n      population: false,\n      bars: true,\n      padding: 0,\n      labels: false,\n      x_axis: true,\n      variable_name: 'cases',\n      date_range: [],\n      y_min: null,\n      left_y_axis: false,\n      tooltip_default: 'top',\n      // other options auto or bottom\n      margin: {\n        left: 20,\n        right: 50,\n        top: 10,\n        bottom: 30\n      },\n      text: {\n        daily_numbers: 'Daily new {{ variable }}',\n        tooltip_suffix: '{{ number }} new {{ variable }}',\n        avg: '{{ average }}-day average',\n        per_pop_tt: '{{ number }} new {{ variable }} per 100k people in the population',\n        subhed: '',\n        no_data: 'No reported {{ variable }}'\n      },\n      locale: 'en',\n      chart_formats: {\n        // Format number for axis\n        number: ',',\n        // Format number for tooltip\n        number_tooltip: ',',\n        // Date on tooltip\n        date_tooltip: '%B %e',\n        // Date format for the x axis\n        date: '%b %e'\n      },\n      transition_elements: true\n    });\n\n    Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__[\"default\"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_this), \"defaultData\", []);\n\n    return _this;\n  }\n\n  Object(_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(WeeklyAverage, [{\n    key: \"draw\",\n    value: function draw() {\n      var data = this.data();\n      var props = this.props();\n      var node = this.selection().node();\n      var locale = new _reuters_graphics_d3_locale__WEBPACK_IMPORTED_MODULE_9___default.a(props.locale);\n      var dateParse = _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].timeParse('%Y-%m-%d');\n      var dateFormat = locale.formatTime(props.chart_formats.date);\n      var dateFormatMatch = locale.formatTime('%Y-%m-%d');\n      var dateFormatTT = locale.formatTime(props.chart_formats.date_tooltip);\n      var numberFormatTT = locale.format(props.chart_formats.number_tooltip);\n      var numberFormat = locale.format(props.chart_formats.number);\n      var dateList = [];\n      var yRange;\n      var allDates = [];\n\n      var _node$getBoundingClie = node.getBoundingClientRect(),\n          width = _node$getBoundingClie.width;\n\n      var transition = _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].transition().duration(750);\n\n      if (props.text.subhed.length > 0) {\n        this.selection().appendSelect('h6.chart-title').text(props.text.subhed);\n      }\n\n      var gOuter = this.selection().appendSelect('svg') // see docs in ./utils/d3.js\n      .attr('width', width).attr('height', props.height);\n      var g = gOuter.appendSelect('g.container').attr('transform', \"translate(\".concat(props.margin.left, \", \").concat(props.margin.top, \")\"));\n\n      if (_utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].sum(data, function (d) {\n        return d.count;\n      }) > 0) {\n        var showTooltip = function showTooltip(date, obj) {\n          var TooltipText = props.population ? props.text.per_pop_tt : props.text.tooltip_suffix;\n          var formatFunction = props.population ? _utils_utils__WEBPACK_IMPORTED_MODULE_7__[\"round\"] : numberFormatTT;\n          g.select('.labels').style('opacity', 0);\n          g.select('.highlight-bar').attr('x', scaleX(obj.date)).attr('width', scaleX.bandwidth()).attr('height', function (d) {\n            return scaleY(0) - scaleY(obj.use_count);\n          }).attr('y', function (d) {\n            return scaleY(obj.use_count);\n          }).style('opacity', 1).classed('active', true);\n          var coords = [];\n          coords[0] = scaleX(obj.date) + props.margin.left + scaleX.bandwidth() / 2;\n          coords[1] = scaleY(obj.use_count) + props.margin.top;\n          var q = getTooltipType(coords, [props.height, width]);\n          tooltipBox.classed('tooltip-active', true).classed('tooltip-ne tooltip-s tooltip-n tooltip-sw tooltip-nw tooltip-se', false).style('left', \"\".concat(coords[0], \"px\")).style('top', \"\".concat(coords[1], \"px\")).classed(\"tooltip-\".concat(q), true);\n          ttInner.appendSelect('div.tt-header').text(dateFormatTT(obj.date));\n          ttInner.appendSelect('div.tt-row').text(mustache__WEBPACK_IMPORTED_MODULE_10___default.a.render(TooltipText, {\n            variable: props.variable_name,\n            number: formatFunction(obj.use_count)\n          }));\n        };\n\n        var hideTooltip = function hideTooltip() {\n          g.select('.labels').style('opacity', 1);\n          g.select('.highlight-bar').attr('height', function (d) {\n            return props.height;\n          }).attr('y', function (d) {\n            return 0;\n          }).style('opacity', 0).classed('active', false);\n          tooltipBox.classed('tooltip-active', false);\n        };\n\n        var getTooltipType = function getTooltipType(coords, size) {\n          var l = [];\n          var ns_threshold = 4;\n\n          if (props.tooltip_default == 'top') {\n            l.push('s');\n          } else if (props.tooltip_default == 'bottom') {\n            l.push('n');\n          } else {\n            if (coords[1] > size[1] / ns_threshold) {\n              l.push('s');\n            } else {\n              l.push('n');\n            }\n          }\n\n          if (coords[0] > size[0] / 2) {\n            l.push('e');\n          }\n\n          if (coords[0] < size[0] / 2) {\n            l.push('w');\n          }\n\n          return l.join('');\n        }; // Annotations\n        // Reposition if already on the page\n\n\n        this.selection().select('.no-data').remove();\n\n        if (props.date_range.length > 1) {\n          var startDate = dateParse(props.date_range[0]);\n          var endDate = dateParse(props.date_range[1]);\n\n          if (startDate < endDate && endDate <= _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].max(data, function (d) {\n            return dateParse(d.date);\n          })) {\n            data = data.filter(function (d) {\n              return dateParse(d.date) >= startDate && dateParse(d.date) <= endDate;\n            });\n            dateList = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_7__[\"getDates\"])(startDate, endDate);\n          } else {\n            dateList = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_7__[\"getDates\"])(dateParse(data[0].date), dateParse(data[data.length - 1].date));\n          }\n        } else {\n          dateList = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_7__[\"getDates\"])(dateParse(data[0].date), dateParse(data[data.length - 1].date));\n        }\n\n        dateList.forEach(function (d) {\n          var o = data.filter(function (e) {\n            return e.date === dateFormatMatch(d);\n          });\n          var obj = {\n            date: d\n          };\n\n          if (!o[0]) {\n            obj.count = 0;\n          } else {\n            obj.count = o[0].count;\n          }\n\n          allDates.push(obj);\n        });\n        allDates = allDates.sort(function (a, b) {\n          return _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].descending(a.date, b.date);\n        });\n        allDates.forEach(function (d, i) {\n          d.use_count = props.population ? d.count / props.population * 100000 : d.count;\n          d.use_count = d.use_count < 0 ? 0 : d.use_count;\n          d.mean = _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].mean(allDates.slice(i, i + props.avg_days), function (d) {\n            return +d.count < 0 ? 0 : d.count;\n          }); // avg calc\n\n          d.use_mean = props.population ? d.mean / props.population * 100000 : d.mean;\n          d.use_mean = d.use_mean < 0 ? 0 : d.use_mean;\n        }); // x scale\n\n        var scaleX = _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].scaleBand().round(false).range([0, width - props.margin.right - props.margin.left]).domain(dateList).padding(props.padding);\n        var scaleXHover = _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].scaleLinear().range([0, width - props.margin.right - props.margin.left]).domain([dateList[0], dateList[dateList.length - 1]]);\n\n        if (props.bars) {\n          yRange = _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].extent(allDates, function (d) {\n            return +d.use_count;\n          });\n        } else {\n          yRange = _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].extent(allDates, function (d) {\n            return +d.use_mean;\n          });\n        }\n\n        if (props.y_min && yRange[1] < props.y_min) {\n          yRange[1] = props.y_min;\n        } // y scale\n\n\n        var scaleY = _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].scaleLinear().range([props.height - props.margin.bottom - props.margin.top, 0]).domain(yRange); // line\n\n        var line = _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].line().x(function (d) {\n          return scaleX(d.date);\n        }).y(function (d) {\n          return scaleY(d.use_mean ? d.use_mean : 0);\n        }).curve(_utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].curveMonotoneX);\n        var area = _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].area().x(function (d) {\n          return scaleX(d.date);\n        }).y1(function (d) {\n          return scaleY(+d.use_count);\n        }).y0(scaleY(0)).curve(_utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].curveStep);\n\n        if (props.x_axis) {\n          g.appendSelect('g.axis--x').attr('class', 'axis--x axis').attr('transform', \"translate(0,\".concat(props.height - props.margin.bottom - props.margin.top, \")\")).transitionIf(props.transition_elements, transition).call(_utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].axisBottom(scaleX).tickValues([dateList[0], dateList[dateList.length - 1]]).tickFormat(dateFormat));\n        }\n\n        if (props.bars) {\n          var bars = g.appendSelect('g.bars-container').selectAll('.area').data([allDates]);\n          bars.enter().append('path').attr('transform', \"translate(\".concat(scaleX.bandwidth() / 2, \",0)\")).attr('class', 'area').style('fill', props.fill).merge(bars).transitionIf(props.transition_elements, transition).style('fill', props.fill).attr('d', area);\n          bars.exit().transitionIf(props.transition_elements, transition).remove();\n          g.appendSelect('rect.highlight-bar');\n          var touchBox = g.appendSelect('g.dummy-container').append('rect').attr('height', props.height - props.margin.top).attr('width', width - props.margin.left - props.margin.right + 2).style('opacity', 0);\n          touchBox.on('mousemove', Object(lodash__WEBPACK_IMPORTED_MODULE_12__[\"throttle\"])(function () {\n            if (!_utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].event) return;\n            var coordinates = _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].mouse(g.node());\n            var highlightDate = dateFormatMatch(new Date(scaleXHover.invert(coordinates[0])));\n            var obj = allDates.filter(function (d) {\n              return dateFormatMatch(d.date) === highlightDate;\n            })[0];\n\n            if (highlightDate && obj) {\n              showTooltip(highlightDate, obj);\n            }\n          }, 50), true);\n          touchBox.on('touchstart touchmove', Object(lodash__WEBPACK_IMPORTED_MODULE_12__[\"throttle\"])(function () {\n            if (!_utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].event) return;\n            var coordinates = _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].mouse(g.node());\n            var highlightDate = dateFormatMatch(new Date(scaleXHover.invert(coordinates[0])));\n            var obj = allDates.filter(function (d) {\n              return dateFormatMatch(d.date) === highlightDate;\n            })[0];\n\n            if (highlightDate && obj) {\n              showTooltip(highlightDate, obj);\n            }\n          }, 50), true);\n          touchBox.on('mouseleave', hideTooltip);\n          touchBox.on('touchend touchcancel', hideTooltip);\n          touchBox.on('mouseout', hideTooltip);\n        } // avg line\n\n\n        var avgLine = g.selectAll('.avg-line').data([allDates]);\n        avgLine.enter().append('path').attr('class', 'avg-line').attr('stroke', props.stroke).attr('stroke-width', props.strokeWidth).merge(avgLine).transitionIf(props.transition_elements, transition).attr('d', line).attr('fill', 'none').attr('stroke', props.stroke).style('pointer-events', 'none').attr('stroke-width', props.strokeWidth); // LABELS\n\n        if (props.labels) {\n          var labelContainer = g.appendSelect('g.labels');\n          var useDay = allDates.length - 30;\n          var anchor = 'middle';\n          var labelX = scaleX(allDates[useDay].date);\n\n          if (labelX < (width - props.margin.left - props.margin.right) * 0.18) {\n            anchor = 'start';\n          } // avg label\n\n\n          var avgLabel = labelContainer.appendSelect('g.avg-label').attr('transform', \"translate(\".concat(scaleX(allDates[useDay].date), \",\").concat(scaleY(allDates[useDay].use_mean) - props.height / 20, \")\"));\n          avgLabel.appendSelect('line').attr('x1', 0).attr('x2', 0).attr('y1', props.height / 20).attr('y2', 0);\n          avgLabel.appendSelect('text').attr('dx', -10).attr('dy', -5).style('text-anchor', anchor).text(mustache__WEBPACK_IMPORTED_MODULE_10___default.a.render(props.text.avg, {\n            average: props.avg_days\n          })); // new numbers label\n          // GET MAX\n\n          if (props.bars) {\n            var max = _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].max(allDates, function (d) {\n              return d.use_count;\n            });\n            var maxVar = allDates.filter(function (d) {\n              return d.use_count === max;\n            })[0];\n            var newNosLabel = labelContainer.appendSelect('g.new-nos-label');\n            var labelLine = newNosLabel.appendSelect('line').attr('x2', 0).attr('y1', 10).attr('y2', 10);\n            var labelText = newNosLabel.appendSelect('text').attr('dy', 12).text(mustache__WEBPACK_IMPORTED_MODULE_10___default.a.render(props.text.daily_numbers, {\n              variable: props.variable_name\n            }));\n\n            if (scaleX(maxVar.date) < 0.4 * width) {\n              newNosLabel.attr('transform', \"translate(\".concat(scaleX(maxVar.date), \",\").concat(scaleY(maxVar.use_count), \")\"));\n              labelLine.attr('x1', 10);\n            } else {\n              newNosLabel.attr('transform', \"translate(\".concat(scaleX(maxVar.date), \",\").concat(scaleY(maxVar.use_count), \")\"));\n              labelLine.attr('x1', -10).attr('x2', 0);\n              labelText.style('text-anchor', 'end').attr('dx', -13);\n            }\n          }\n        }\n\n        if (props.left_y_axis) {\n          var _labelContainer = g.appendSelect('g.labels');\n\n          var _max = _utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].max(allDates, function (d) {\n            return d.use_mean;\n          });\n\n          var _maxVar = allDates.filter(function (d) {\n            return d.use_mean === _max;\n          })[0];\n          var maxPlotVal = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_7__[\"round\"])(_maxVar.use_mean, 0);\n\n          var _newNosLabel = _labelContainer.appendSelect('g.new-nos-label').attr('transform', \"translate(\".concat(scaleX(_maxVar.date), \",\").concat(scaleY(maxPlotVal), \")\"));\n\n          _newNosLabel.appendSelect('line').attr('x1', -10).attr('x2', 0).attr('y1', 0).attr('y2', 0);\n\n          _newNosLabel.appendSelect('text').style('text-anchor', 'end').attr('dx', -10).attr('dy', 4).text(numberFormatTT(maxPlotVal));\n        } else {\n          var ticks;\n\n          if (yRange[1] === 2) {\n            ticks = 2;\n          } else if (!props.bars || yRange[1] === 1) {\n            ticks = 1;\n          } else {\n            ticks = 3;\n          }\n\n          g.appendSelect('g.axis--y').attr('class', 'axis--y axis').attr('transform', \"translate(\".concat(width - props.margin.right - props.margin.left, \",0)\")).transitionIf(props.transition_elements, transition).call(_utils_d3__WEBPACK_IMPORTED_MODULE_11__[\"default\"].axisRight(scaleY).ticks(ticks).tickFormat(numberFormat));\n          g.select('.axis--y').selectAll('.tick').each(function (d) {\n            if (d === 0) {\n              this.remove();\n            }\n          });\n        } // tooltip\n\n\n        var tooltipBox = this.selection().appendSelect('div.custom-tooltip');\n        var ttInner = tooltipBox.appendSelect('div.tooltip-inner');\n        var annotationCheck = !!g.selectAll('g.annotations-container').node();\n        props.annotations = props.annotations.filter(function (d) {\n          if (scaleX(dateParse(d.date)) && d.text.length > 1) {\n            return d;\n          }\n        });\n\n        if (props.annotations.length > 0 || annotationCheck) {\n          var annotationsContainer = g.appendSelect('g.annotations-container').selectAll('.annotation').data(props.annotations, function (d, i) {\n            return d.date;\n          });\n          var annotation = annotationsContainer.enter().append('g').attr('class', function (d) {\n            return d[\"class\"] ? \"annotation \".concat(d[\"class\"]) : 'annotation';\n          }).attr('transform', function (d) {\n            return \"translate(\".concat(scaleX(dateParse(d.date)), \",0)\");\n          });\n          annotationsContainer.merge(annotationsContainer).transitionIf(props.transition_elements, transition).attr('transform', function (d) {\n            return \"translate(\".concat(scaleX(dateParse(d.date)), \",0)\");\n          });\n          annotation.appendSelect('line').attr('x1', 0).attr('x2', 0).attr('y2', function (d) {\n            if (scaleX(dateParse(d.date)) > width / 2) {\n              return props.height / 6 * 1.5 - 10;\n            } else {\n              return props.height / 6 * 4 - 10;\n            }\n          }).attr('y1', props.height - props.margin.top - props.margin.bottom);\n          var textContainer = annotation.appendSelect('g.text-container').attr('transform', function (d) {\n            if (scaleX(dateParse(d.date)) > width / 2) {\n              return \"translate(-8,\".concat(props.height / 6 * 1.5, \")\");\n            } else {\n              return \"translate(8,\".concat(props.height / 6 * 4, \")\");\n            }\n          }).attr('text-anchor', function (d) {\n            if (scaleX(dateParse(d.date)) > width / 2) {\n              return 'end';\n            } else {\n              return 'start';\n            }\n          });\n          textContainer.appendSelect('text.date').text(function (d) {\n            return dateFormatTT(dateParse(d.date));\n          });\n          textContainer.appendSelect('text.text').attr('dy', 16).text(function (d) {\n            return d.text;\n          });\n          annotationsContainer.exit().remove();\n        }\n      } else {\n        gOuter.select('.container').remove();\n        this.selection().appendSelect('p.no-data').text(mustache__WEBPACK_IMPORTED_MODULE_10___default.a.render(props.text.no_data, {\n          variable: props.variable_name\n        }));\n      }\n\n      return this;\n    }\n  }]);\n\n  return WeeklyAverage;\n}(_base_ChartComponent__WEBPACK_IMPORTED_MODULE_8__[\"default\"]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (WeeklyAverage);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lib/chart.js\n");

/***/ })

})